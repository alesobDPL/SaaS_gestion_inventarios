generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  sku        Int      @unique
  category   String
  stock      Int
  price      Float
  note       String?
  supplier   Supplier @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  supplierId Int
  isActive   Boolean  @default(true)

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Supplier {
  id      Int       @id @default(autoincrement())
  name    String
  contact Int
  email   String    @unique
  product Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  status     OrderStatus @default(PENDING)

  orderItems OrderItem[]
}

//Tabla de relacion para pedidos y productos
model OrderItem {
  id          Int    @id @default(autoincrement())
  productId   Int
  orderId     Int
  quantity    Int
  price       Float
  productName String

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])
}

//Enum for the order status
enum OrderStatus {
  PENDING
  SHIPPED
  COMPLETED
  CANCELED
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  type      String //What tipe of notificacion. If stock, order, product update
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  /**
   * viaEmail  Boolean
   * viaScoket Boolean
   * viaPush   Boolean
   * userId    String
   * user User @relation(fields: [userId], references: [id])
   */
}
